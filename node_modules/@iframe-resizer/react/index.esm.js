/*!
 *  @preserve
 *  
 *  @module     iframe-resizer/react 5.1.5 (esm) - 2024-07-09
 *
 *  @license    GPL-3.0 for non-commercial use only.
 *              For commercial use, you must purchase a license from
 *              https://iframe-resizer.com/pricing
 * 
 *  @desciption Keep same and cross domain iFrames sized to their content 
 *
 *  @author     David J. Bradshaw <info@iframe-resizer.com>
 * 
 *  @see        {@link https://iframe-resizer.com}
 * 
 *  @copyright  (c) 2013 - 2024, David J. Bradshaw. All rights reserved.
 */


import _extends from '@babel/runtime/helpers/extends';
import _defineProperty from '@babel/runtime/helpers/defineProperty';
import _objectWithoutProperties from '@babel/runtime/helpers/objectWithoutProperties';
import connectResizer from '@iframe-resizer/core';
import React, { useRef, useEffect, useImperativeHandle } from 'react';
import warning from 'warning';

var _excluded$1 = ["license", "bodyBackground", "bodyMargin", "bodyPadding", "checkOrigin", "direction", "inPageLinks", "offset", "offsetHeight", "offsetWidth", "scrolling", "tolerance", "warningTimeout", "onClosed", "onReady", "onMessage", "onResized"];
const filterIframeAttribs = (function (props) {
  props.license;
    props.bodyBackground;
    props.bodyMargin;
    props.bodyPadding;
    props.checkOrigin;
    props.direction;
    props.inPageLinks;
    props.offset;
    props.offsetHeight;
    props.offsetWidth;
    props.scrolling;
    props.tolerance;
    props.warningTimeout;
    props.onClosed;
    props.onReady;
    props.onMessage;
    props.onResized;
    var iframeProps = _objectWithoutProperties(props, _excluded$1);
  return iframeProps;
});

var _excluded = ["title", "forwardRef"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function IframeResizer(props) {
  // eslint-disable-next-line react/prop-types
  var title = props.title,
    forwardRef = props.forwardRef,
    rest = _objectWithoutProperties(props, _excluded);
  var filteredProps = filterIframeAttribs(rest);
  var iframeRef = useRef(null);
  var onClose = function onClose() {
    var _iframeRef$current;
    warning(!iframeRef.current, "[iframe-resizer/react][".concat(iframeRef === null || iframeRef === void 0 || (_iframeRef$current = iframeRef.current) === null || _iframeRef$current === void 0 ? void 0 : _iframeRef$current.id, "] Close event ignored, to remove the iframe update your React component."));
    return !iframeRef.current; // Allow React to close this
  };

  // This hook is only run once, as once iframe-resizer is bound, it will
  // deal with changes to the element and does not need recalling
  useEffect(function () {
    var iframe = iframeRef.current;
    var resizer = connectResizer(_objectSpread(_objectSpread({}, rest), {}, {
      onClose: onClose
    }))(iframe);
    return function () {
      return resizer === null || resizer === void 0 ? void 0 : resizer.disconnect();
    };
  }, []); // eslint-disable-line react-hooks/exhaustive-deps

  useImperativeHandle(forwardRef, function () {
    return {
      getRef: function getRef() {
        return iframeRef;
      },
      getElement: function getElement() {
        return iframeRef.current;
      },
      resize: function resize() {
        return iframeRef.current.iframeResizer.resize();
      },
      moveToAnchor: function moveToAnchor(anchor) {
        return iframeRef.current.iframeResizer.moveToAnchor(anchor);
      },
      sendMessage: function sendMessage(message, targetOrigin) {
        iframeRef.current.iframeResizer.sendMessage(message, targetOrigin);
      }
    };
  });
  return /*#__PURE__*/React.createElement("iframe", _extends({
    title: title
  }, filteredProps, {
    ref: iframeRef
  }));
}

export { IframeResizer as default };
